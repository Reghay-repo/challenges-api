// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  username         String         @unique
  email            String         @unique
  type             UserType
  hash             String
  sex              SexType?
  age              Int?
  firstName        String?
  lastName         String?
  phone            String?
  country          String?
  city             String?
  address          String?
  field            String?
  ice              String?        @unique
  isBanned         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  challenges       Challenge[]
  Post             Post[]
  messagesSent     Message[]      @relation("SentMessages")
  messagesReceived Message[]      @relation("ReceivedMessages")
  sentGifts        Gift[]         @relation("SentGifts")
  receivedGifts    Gift[]         @relation("ReceivedGifts")
  notifications    Notification[]
  likes            Like[]

  @@map("users")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Like {
  id          Int        @id @default(autoincrement())
  userId      Int
  postId      Int?
  challengeId Int?
  user        User       @relation(fields: [userId], references: [id])
  post        Post?      @relation(fields: [postId], references: [id])
  challenge   Challenge? @relation(fields: [challengeId], references: [id])

  @@map("likes")
}

model Gift {
  id         Int    @id @default(autoincrement())
  name       String
  sender     User   @relation("SentGifts", fields: [senderId], references: [id])
  senderId   Int
  receiver   User   @relation("ReceivedGifts", fields: [receiverId], references: [id])
  receiverId Int

  @@map("gifts")
}

model Message {
  id            Int     @id @default(autoincrement())
  text          String
  messageStatus Boolean
  sender        User?   @relation("SentMessages", fields: [senderId], references: [id])
  senderId      Int?
  receiver      User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId    Int?

  @@map("messages")
}

model Challenge {
  id          Int      @id @default(autoincrement())
  description String?
  videoUrl    String?
  tags        String[]
  endDate     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  likes       Like[]

  @@map("challenges")
}

model Post {
  id          Int      @id @default(autoincrement())
  description String?
  imageUrls   String[]
  tags        String[]
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  updatedAt   DateTime @updatedAt
  likes       Like[]

  @@map("posts")
}

enum UserType {
  ADMIN
  NORMAL
  COMPANY
}

enum SexType {
  MALE
  FEMALE
}
