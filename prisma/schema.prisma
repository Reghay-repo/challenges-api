// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  username         String          @unique
  email            String          @unique
  type             UserType
  hash             String
  sex              SexType?
  age              Int?
  firstName        String?
  lastName         String?
  phone            String?
  country          String?
  city             String?
  address          String?
  field            String?
  ice              String?         @unique
  isBanned         Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  challenges       Challenge[]
  Post             Post[]
  LikedPosts       PostLike[]
  LikedChallenges  ChallengeLike[]
  CommentedPosts   PostComment[]
  CommentedChallenges ChallengeComment[]
  followers Follow[] @relation("following")
  following Follow[] @relation("follower")
  @@map("users")
}

model Follow {
  id          Int          @id @default(autoincrement())
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int
  @@unique([followerId, followingId])
  @@map("follows")
}

model Challenge {
  id            Int             @id @default(autoincrement())
  description   String?
  videoUrl      String?
  tags          String[]
  endDate       DateTime        @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User           @relation(fields: [userId], references: [id])
  userId        Int
  ChallengeLikes ChallengeLike[]
  ChallengeComments ChallengeComment[]
  @@map("challenges")
}

model Post {
  id          Int        @id @default(autoincrement())
  description String?
  imageUrls   String[]
  tags        String[]
  createdAt   DateTime   @default(now())
  User        User      @relation(fields: [userId], references: [id])
  userId      Int
  updatedAt   DateTime   @updatedAt
  PostLikes    PostLike[]
  PostComments PostComment[]

  @@map("posts")
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([postId, userId])
  @@map("post_comments")
}

model ChallengeComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  challengeId Int
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  @@unique([challengeId, userId])
  @@map("challenge_comments")
}

model PostLike {
  id     Int   @id @default(autoincrement())
  userId Int
  postId Int
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([postId, userId])
  @@map("post_likes")
}

model ChallengeLike {
  id          Int        @id @default(autoincrement())
  userId      Int
  challengeId Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  @@unique([challengeId, userId])
  @@map("challenge_likes")
}

enum UserType {
  ADMIN
  NORMAL
  COMPANY
}

enum SexType {
  MALE
  FEMALE
}
